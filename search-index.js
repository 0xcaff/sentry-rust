var N = null;var searchIndex = {};
searchIndex["sentry"]={"doc":"","items":[[0,"protocol","sentry","The current latest sentry protocol version.",N,N],[0,"value","sentry::protocol","An arbitrary (JSON) value.",N,N],[8,"Index","sentry::protocol::value","A type that can be used to index into a `serde_json::Value`.",N,N],[3,"Number","","Represents a JSON number, whether integer or floating point.",N,N],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[3,"Map","","Represents a JSON key/value type.",N,N],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[0,"map","sentry::protocol","The internally used arbitrary data map type.",N,N],[3,"ValuesMut","sentry::protocol::map","A mutable iterator over the values of a `BTreeMap`.",N,N],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",N,N],[3,"VacantEntry","","A view into a vacant entry in a `BTreeMap`. It is part of the [`Entry`] enum.",N,N],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",N,N],[3,"BTreeMap","","A map based on a B-Tree.",N,N],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part of the [`Entry`] enum.",N,N],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a `BTreeMap`.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",N,N],[13,"Vacant","","A vacant entry.",1,N],[13,"Occupied","","An occupied entry.",1,N],[3,"Values","","An iterator over the values of a `BTreeMap`.",N,N],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",N,N],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",N,N],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",N,N],[0,"debugid","sentry::protocol","Represents a debug ID.",N,N],[3,"ParseDebugIdError","sentry::protocol::debugid","Indicates a parsing error",N,N],[3,"DebugId","","Unique identifier for debug information files and their debug information.",N,N],[3,"BreakpadFormat","","Wrapper around `DebugId` for Breakpad formatting.",N,N],[3,"Values","sentry::protocol","A wrapper type for collections with attached meta data.",N,N],[12,"values","","The values of the collection.",2,N],[3,"LogEntry","","Represents a log entry message.",N,N],[12,"message","","The log message with parameters replaced by `%s`",3,N],[12,"params","","Positional parameters to be inserted into the log entry.",3,N],[3,"Frame","","Represents a frame.",N,N],[12,"function","","The name of the function is known.",4,N],[12,"symbol","","The potentially mangled name of the symbol as it appears in an executable.",4,N],[12,"module","","The name of the module the frame is contained in.",4,N],[12,"package","","The name of the package that contains the frame.",4,N],[12,"filename","","The filename (basename only).",4,N],[12,"abs_path","","If known the absolute path.",4,N],[12,"lineno","","The line number if known.",4,N],[12,"colno","","The column number if known.",4,N],[12,"pre_context","","The sources of the lines leading up to the current line.",4,N],[12,"context_line","","The current line as source.",4,N],[12,"post_context","","The sources of the lines after the current line.",4,N],[12,"in_app","","In-app indicator.",4,N],[12,"vars","","Optional local variables.",4,N],[12,"image_addr","","If known the location of the image.",4,N],[12,"instruction_addr","","If known the location of the instruction.",4,N],[12,"symbol_addr","","If known the location of symbol.",4,N],[3,"TemplateInfo","","Represents template debug info.",N,N],[12,"filename","","The filename (basename only).",5,N],[12,"abs_path","","If known the absolute path.",5,N],[12,"lineno","","The line number if known.",5,N],[12,"colno","","The column number if known.",5,N],[12,"pre_context","","The sources of the lines leading up to the current line.",5,N],[12,"context_line","","The current line as source.",5,N],[12,"post_context","","The sources of the lines after the current line.",5,N],[3,"Stacktrace","","Represents a stacktrace.",N,N],[12,"frames","","The list of frames in the stacktrace.",6,N],[12,"frames_omitted","","Optionally a segment of frames removed (`start`, `end`).",6,N],[12,"registers","","Optional register values of the thread.",6,N],[4,"ThreadId","","Represents a thread id.",N,N],[13,"Int","","Integer representation for the thread id",7,N],[13,"String","","String representation for the thread id",7,N],[3,"Addr","","Represents an address.",N,N],[12,"0","","",8,N],[3,"RegVal","","Represents a register value.",N,N],[12,"0","","",9,N],[3,"Thread","","Represents a single thread.",N,N],[12,"id","","The optional ID of the thread (usually an integer)",10,N],[12,"name","","The optional name of the thread.",10,N],[12,"stacktrace","","If the thread suspended or crashed a stacktrace can be attached here.",10,N],[12,"raw_stacktrace","","Optional raw stacktrace.",10,N],[12,"crashed","","True if this is the crashed thread.",10,N],[12,"current","","Indicates that the thread was not suspended when the event was created.",10,N],[3,"CError","","POSIX signal with optional extended data.",N,N],[12,"number","","The error code as specified by ISO C99, POSIX.1-2001 or POSIX.1-2008.",11,N],[12,"name","","Optional name of the errno constant.",11,N],[3,"MachException","","Mach exception information.",N,N],[12,"exception","","The mach exception type.",12,N],[12,"code","","The mach exception code.",12,N],[12,"subcode","","The mach exception subcode.",12,N],[12,"name","","Optional name of the mach exception.",12,N],[3,"PosixSignal","","POSIX signal with optional extended data.",N,N],[12,"number","","The POSIX signal number.",13,N],[12,"code","","An optional signal code present on Apple systems.",13,N],[12,"name","","Optional name of the errno constant.",13,N],[12,"code_name","","Optional name of the errno constant.",13,N],[3,"MechanismMeta","","Operating system or runtime meta information to an exception mechanism.",N,N],[12,"errno","","Optional ISO C standard error code.",14,N],[12,"signal","","Optional POSIX signal number.",14,N],[12,"mach_exception","","Optional mach exception information.",14,N],[3,"Mechanism","","Represents a single exception.",N,N],[12,"ty","","The mechanism type identifier.",15,N],[12,"description","","Human readable detail description.",15,N],[12,"help_link","","An optional link to online resources describing this error.",15,N],[12,"handled","","An optional flag indicating whether this exception was handled.",15,N],[12,"data","","Additional attributes depending on the mechanism type.",15,N],[12,"meta","","Operating system or runtime meta information.",15,N],[3,"Exception","","Represents a single exception.",N,N],[12,"ty","","The type of the exception.",16,N],[12,"value","","The optional value of the exception.",16,N],[12,"module","","An optional module for this exception.",16,N],[12,"stacktrace","","Optionally the stacktrace.",16,N],[12,"raw_stacktrace","","An optional raw stacktrace.",16,N],[12,"thread_id","","Optional identifier referring to a thread.",16,N],[12,"mechanism","","The mechanism of the exception including OS specific exception values.",16,N],[3,"ParseLevelError","","An error used when parsing `Level`.",N,N],[4,"Level","","Represents the level of severity of an event or breadcrumb.",N,N],[13,"Debug","","Indicates very spammy debug information.",17,N],[13,"Info","","Informational messages.",17,N],[13,"Warning","","A warning.",17,N],[13,"Error","","An error.",17,N],[13,"Fatal","","Similar to error but indicates a critical event that usually causes a shutdown.",17,N],[3,"Breadcrumb","","Represents a single breadcrumb.",N,N],[12,"timestamp","","The timestamp of the breadcrumb.  This is required.",18,N],[12,"ty","","The type of the breadcrumb.",18,N],[12,"category","","The optional category of the breadcrumb.",18,N],[12,"level","","The non optional level of the breadcrumb.  It defaults to info.",18,N],[12,"message","","An optional human readbale message for the breadcrumb.",18,N],[12,"data","","Arbitrary breadcrumb data that should be send along.",18,N],[4,"IpAddress","","An IP address, either IPv4, IPv6 or Auto.",N,N],[13,"Auto","","The IP address needs to be infered from the user's context.",19,N],[13,"Exact","","The exact given IP address (v4 or v6).",19,N],[3,"User","","Represents user info.",N,N],[12,"id","","The ID of the user.",20,N],[12,"email","","The email address of the user.",20,N],[12,"ip_address","","The remote ip address of the user.",20,N],[12,"username","","A human readable username of the user.",20,N],[12,"other","","Additional arbitrary fields for forwards compatibility.",20,N],[3,"Request","","Represents http request data.",N,N],[12,"url","","The current URL of the request.",21,N],[12,"method","","The HTTP request method.",21,N],[12,"data","","Optionally some associated request data (human readable)",21,N],[12,"query_string","","Optionally the encoded query string.",21,N],[12,"cookies","","An encoded cookie string if available.",21,N],[12,"headers","","HTTP request headers.",21,N],[12,"env","","Optionally a CGI/WSGI etc. environment dictionary.",21,N],[3,"SystemSdkInfo","","Holds information about the system SDK.",N,N],[12,"sdk_name","","The internal name of the SDK",22,N],[12,"version_major","","the major version of the SDK as integer or 0",22,N],[12,"version_minor","","the minor version of the SDK as integer or 0",22,N],[12,"version_patchlevel","","the patch version of the SDK as integer or 0",22,N],[4,"DebugImage","","Represents a debug image.",N,N],[13,"Apple","","Apple debug images (machos).  This is currently also used for non apple platforms with similar debug setups.",23,N],[13,"Symbolic","","Symbolic (new style) debug infos.",23,N],[13,"Proguard","","A reference to a proguard debug file.",23,N],[3,"AppleDebugImage","","Represents an apple debug image in the debug meta.",N,N],[12,"name","","The name of the debug image (usually filename)",24,N],[12,"arch","","The optional CPU architecture of the debug image.",24,N],[12,"cpu_type","","Alternatively a macho cpu type.",24,N],[12,"cpu_subtype","","Alternatively a macho cpu subtype.",24,N],[12,"image_addr","","The starting address of the image.",24,N],[12,"image_size","","The size of the image in bytes.",24,N],[12,"image_vmaddr","","The address where the image is loaded at runtime.",24,N],[12,"uuid","","The unique UUID of the image.",24,N],[3,"SymbolicDebugImage","","Represents a symbolic debug image.",N,N],[12,"name","","The name of the debug image (usually filename)",25,N],[12,"arch","","The optional CPU architecture of the debug image.",25,N],[12,"image_addr","","The starting address of the image.",25,N],[12,"image_size","","The size of the image in bytes.",25,N],[12,"image_vmaddr","","The address where the image is loaded at runtime.",25,N],[12,"id","","The unique debug id of the image.",25,N],[3,"ProguardDebugImage","","Represents a proguard mapping file reference.",N,N],[12,"uuid","","The UUID of the associated proguard file.",26,N],[3,"DebugMeta","","Represents debug meta information.",N,N],[12,"sdk_info","","Optional system SDK information.",27,N],[12,"images","","A list of debug information files.",27,N],[3,"RepoReference","","Represents a repository reference.",N,N],[12,"name","","The name of the repository as it is registered in Sentry.",28,N],[12,"prefix","","The optional prefix path to apply to source code when pairing it up with files in the repository.",28,N],[12,"revision","","The optional current revision of the local repository.",28,N],[3,"ClientSdkInfo","","Represents a repository reference.",N,N],[12,"name","","The name of the SDK.",29,N],[12,"version","","The version of the SDK.",29,N],[12,"integrations","","An optional list of integrations that are enabled in this SDK.",29,N],[12,"packages","","An optional list of packages that are installed in the SDK's environment.",29,N],[3,"ClientSdkPackage","","Represents an installed package relevant to the SDK.",N,N],[12,"name","","The name of the package installed.",30,N],[12,"version","","The version of the package.",30,N],[4,"Context","","Typed contextual data.",N,N],[13,"Device","","Device data.",31,N],[13,"Os","","Operating system data.",31,N],[13,"Runtime","","Runtime data.",31,N],[13,"App","","Application data.",31,N],[13,"Browser","","Web browser data.",31,N],[13,"Other","","Generic other context data.",31,N],[4,"Orientation","","Optional device screen orientation",N,N],[13,"Portrait","","Portrait device orientation.",32,N],[13,"Landscape","","Landscape device orientation.",32,N],[3,"DeviceContext","","Holds device information.",N,N],[12,"name","","The name of the device.",33,N],[12,"family","","The family of the device model.",33,N],[12,"model","","The device model (human readable).",33,N],[12,"model_id","","The device model (internal identifier).",33,N],[12,"arch","","The native cpu architecture of the device.",33,N],[12,"battery_level","","The current battery level (0-100).",33,N],[12,"orientation","","The current screen orientation.",33,N],[12,"simulator","","Simulator/prod indicator.",33,N],[12,"memory_size","","Total memory available in byts.",33,N],[12,"free_memory","","How much memory is still available in bytes.",33,N],[12,"usable_memory","","How much memory is usable for the app in bytes.",33,N],[12,"storage_size","","Total storage size of the device in bytes.",33,N],[12,"free_storage","","How much storage is free in bytes.",33,N],[12,"external_storage_size","","Total size of the attached external storage in bytes (eg: android SDK card).",33,N],[12,"external_free_storage","","Free size of the attached external storage in bytes (eg: android SDK card).",33,N],[12,"boot_time","","Optionally an indicator when the device was booted.",33,N],[12,"timezone","","The timezone of the device.",33,N],[12,"other","","Additional arbitrary fields for forwards compatibility.",33,N],[3,"OsContext","","Holds operating system information.",N,N],[12,"name","","The name of the operating system.",34,N],[12,"version","","The version of the operating system.",34,N],[12,"build","","The internal build number of the operating system.",34,N],[12,"kernel_version","","The current kernel version.",34,N],[12,"rooted","","An indicator if the os is rooted (mobile mostly).",34,N],[12,"other","","Additional arbitrary fields for forwards compatibility.",34,N],[3,"RuntimeContext","","Holds information about the runtime.",N,N],[12,"name","","The name of the runtime (for instance JVM).",35,N],[12,"version","","The version of the runtime.",35,N],[12,"other","","Additional arbitrary fields for forwards compatibility.",35,N],[3,"AppContext","","Holds app information.",N,N],[12,"app_start_time","","Optional start time of the app.",36,N],[12,"device_app_hash","","Optional device app hash (app specific device ID)",36,N],[12,"build_type","","Optional build identicator.",36,N],[12,"app_identifier","","Optional app identifier (dotted bundle id).",36,N],[12,"app_name","","Application name as it appears on the platform.",36,N],[12,"app_version","","Application version as it appears on the platform.",36,N],[12,"app_build","","Internal build ID as it appears on the platform.",36,N],[12,"other","","Additional arbitrary fields for forwards compatibility.",36,N],[3,"BrowserContext","","Holds information about the web browser.",N,N],[12,"name","","The name of the browser (for instance \"Chrome\").",37,N],[12,"version","","The version of the browser.",37,N],[12,"other","","Additional arbitrary fields for forwards compatibility.",37,N],[3,"Event","","Represents a full event for Sentry.",N,N],[12,"event_id","","The ID of the event",38,N],[12,"level","","The level of the event (defaults to error)",38,N],[12,"fingerprint","","An optional fingerprint configuration to override the default.",38,N],[12,"culprit","","The culprit of the event.",38,N],[12,"transaction","","The transaction name of the event.",38,N],[12,"message","","A message to be sent with the event.",38,N],[12,"logentry","","Optionally a log entry that can be used instead of the message for more complex cases.",38,N],[12,"logger","","Optionally the name of the logger that created this event.",38,N],[12,"modules","","Optionally a name to version mapping of installed modules.",38,N],[12,"platform","","A platform identifier for this event.",38,N],[12,"timestamp","","The timestamp of when the event was created.",38,N],[12,"server_name","","Optionally the server (or device) name of this event.",38,N],[12,"release","","A release identifier.",38,N],[12,"dist","","An optional distribution identifer.",38,N],[12,"repos","","Repository references",38,N],[12,"environment","","An optional environment identifier.",38,N],[12,"user","","Optionally user data to be sent along.",38,N],[12,"request","","Optionally HTTP request data to be sent along.",38,N],[12,"contexts","","Optional contexts.",38,N],[12,"breadcrumbs","","List of breadcrumbs to send along.",38,N],[12,"exception","","Exceptions to be attached (one or multiple if chained).",38,N],[12,"stacktrace","","A single stacktrace (deprecated)",38,N],[12,"template","","Simplified template error location info",38,N],[12,"threads","","A list of threads.",38,N],[12,"tags","","Optional tags to be attached to the event.",38,N],[12,"extra","","Optional extra information to be sent with the event.",38,N],[12,"debug_meta","","Debug meta information.",38,N],[12,"sdk","","SDK metadata",38,N],[3,"Breadcrumb","sentry","Represents a single breadcrumb.",N,N],[12,"timestamp","","The timestamp of the breadcrumb.  This is required.",18,N],[12,"ty","","The type of the breadcrumb.",18,N],[12,"category","","The optional category of the breadcrumb.",18,N],[12,"level","","The non optional level of the breadcrumb.  It defaults to info.",18,N],[12,"message","","An optional human readbale message for the breadcrumb.",18,N],[12,"data","","Arbitrary breadcrumb data that should be send along.",18,N],[4,"Level","","Represents the level of severity of an event or breadcrumb.",N,N],[13,"Debug","","Indicates very spammy debug information.",17,N],[13,"Info","","Informational messages.",17,N],[13,"Warning","","A warning.",17,N],[13,"Error","","An error.",17,N],[13,"Fatal","","Similar to error but indicates a critical event that usually causes a shutdown.",17,N],[3,"User","","Represents user info.",N,N],[12,"id","","The ID of the user.",20,N],[12,"email","","The email address of the user.",20,N],[12,"ip_address","","The remote ip address of the user.",20,N],[12,"username","","A human readable username of the user.",20,N],[12,"other","","Additional arbitrary fields for forwards compatibility.",20,N],[3,"ChronoParseError","","An error from the `parse` function.",N,N],[3,"DateTime","","ISO 8601 combined date and time with time zone.",N,N],[3,"DebugId","","Unique identifier for debug information files and their debug information.",N,N],[3,"Dsn","","Represents a Sentry dsn.",N,N],[3,"ParseDebugIdError","","Indicates a parsing error",N,N],[8,"TimeZone","","The time zone.",N,N],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",39,N],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",39,[[["self"],["i32"],["u32"],["u32"]],["date"]]],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",39,[[["self"],["i32"],["u32"],["u32"]],["localresult",["date"]]]],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",39,[[["self"],["i32"],["u32"]],["date"]]],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",39,[[["self"],["i32"],["u32"]],["localresult",["date"]]]],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",39,[[["self"],["i32"],["u32"],["weekday"]],["date"]]],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",39,[[["self"],["i32"],["u32"],["weekday"]],["localresult",["date"]]]],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",39,[[["self"],["i64"],["u32"]],["datetime"]]],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",39,[[["self"],["i64"],["u32"]],["localresult",["datetime"]]]],[11,"timestamp_millis","","Makes a new `DateTime` from the number of non-leap milliseconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",39,[[["self"],["i64"]],["datetime"]]],[11,"timestamp_millis_opt","","Makes a new `DateTime` from the number of non-leap milliseconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",39,[[["self"],["i64"]],["localresult",["datetime"]]]],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",39,[[["self"],["str"],["str"]],["result",["datetime","parseerror"]]]],[10,"from_offset","","Reconstructs the time zone from the offset.",39,N],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",39,[[["self"],["naivedate"]],["localresult"]]],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",39,[[["self"],["naivedatetime"]],["localresult"]]],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",39,[[["self"],["naivedate"]],["localresult",["date"]]]],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",39,[[["self"],["naivedatetime"]],["localresult",["datetime"]]]],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",39,N],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",39,N],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",39,[[["self"],["naivedate"]],["date"]]],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",39,[[["self"],["naivedatetime"]],["datetime"]]],[3,"Utc","","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",N,N],[3,"Uuid","","A Universally Unique Identifier (UUID).",N,N],[4,"UuidVariant","","The reserved variants of UUIDs.",N,N],[13,"NCS","","Reserved by the NCS for backward compatibility",40,N],[13,"RFC4122","","As described in the RFC4122 Specification (default)",40,N],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",40,N],[13,"Future","","Reserved for future expansion",40,N],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm.",N,N],[13,"Nil","","Special case for `nil` [`Uuid`].",41,N],[13,"Mac","","Version 1: MAC address",41,N],[13,"Dce","","Version 2: DCE Security",41,N],[13,"Md5","","Version 3: MD5 hash",41,N],[13,"Random","","Version 4: Random",41,N],[13,"Sha1","","Version 5: SHA-1 hash",41,N],[3,"Client","","The Sentry client object.",N,N],[3,"ClientOptions","","Configuration settings for the client.",N,N],[12,"dsn","","The DSN to use.  If not set the client is effectively disabled.",42,N],[12,"transport","","The transport to use.",42,N],[12,"in_app_include","","module prefixes that are always considered in_app",42,N],[12,"in_app_exclude","","module prefixes that are never in_app",42,N],[12,"extra_border_frames","","border frames which indicate a border from a backtrace to useless internals.  Some are automatically included.",42,N],[12,"max_breadcrumbs","","Maximum number of breadcrumbs (0 to disable feature).",42,N],[12,"trim_backtraces","","Automatically trim backtraces of junk before sending.",42,N],[12,"release","","The release to be sent with events.",42,N],[12,"repos","","The repos to send along with the events.",42,N],[12,"environment","","The environment to be sent with events.",42,N],[12,"server_name","","The server name to be reported.",42,N],[12,"sample_rate","","The sample rate for event submission (0.0 - 1.0, defaults to 1.0)",42,N],[12,"user_agent","","The user agent that should be reported.",42,N],[12,"http_proxy","","An optional HTTP proxy to use.",42,N],[12,"https_proxy","","An optional HTTPS proxy to use.",42,N],[12,"shutdown_timeout","","The timeout on client drop for draining events on shutdown.",42,N],[12,"debug","","Enables debug mode.",42,N],[12,"attach_stacktrace","","Attaches stacktraces to messages.",42,N],[12,"send_default_pii","","If turned on some default PII informat is attached.",42,N],[12,"before_send","","Before send callback.",42,N],[12,"before_breadcrumb","","Before breadcrumb add callback.",42,N],[3,"Hub","","The central object that can manages scopes and clients.",N,N],[3,"Scope","","Holds contextual data for the current scope.",N,N],[5,"init","","Creates the Sentry client for a given client config and binds it.",N,[[["c"]],["clientinitguard"]]],[5,"capture_event","","Captures an event on the currently active client if any.",N,[[["event"]],["uuid"]]],[5,"capture_message","","Captures an arbitrary message.",N,[[["str"],["level"]],["uuid"]]],[5,"add_breadcrumb","","Records a breadcrumb by calling a function.",N,[[["b"]]]],[5,"configure_scope","","Invokes a function that can modify the current scope.",N,[[["f"]],["r"]]],[5,"with_scope","","Temporarily pushes a scope for a single call optionally reconfiguring it.",N,[[["c"],["f"]],["r"]]],[5,"last_event_id","","Returns the last event ID captured.",N,[[],["option",["uuid"]]]],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",39,[[["self"],["i32"],["u32"],["u32"]],["date"]]],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",39,[[["self"],["i32"],["u32"],["u32"]],["localresult",["date"]]]],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",39,[[["self"],["i32"],["u32"]],["date"]]],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",39,[[["self"],["i32"],["u32"]],["localresult",["date"]]]],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",39,[[["self"],["i32"],["u32"],["weekday"]],["date"]]],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",39,[[["self"],["i32"],["u32"],["weekday"]],["localresult",["date"]]]],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",39,[[["self"],["i64"],["u32"]],["datetime"]]],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",39,[[["self"],["i64"],["u32"]],["localresult",["datetime"]]]],[11,"timestamp_millis","","Makes a new `DateTime` from the number of non-leap milliseconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",39,[[["self"],["i64"]],["datetime"]]],[11,"timestamp_millis_opt","","Makes a new `DateTime` from the number of non-leap milliseconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",39,[[["self"],["i64"]],["localresult",["datetime"]]]],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",39,[[["self"],["str"],["str"]],["result",["datetime","parseerror"]]]],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",39,[[["self"],["naivedate"]],["localresult",["date"]]]],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",39,[[["self"],["naivedatetime"]],["localresult",["datetime"]]]],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",39,[[["self"],["naivedate"]],["date"]]],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",39,[[["self"],["naivedatetime"]],["datetime"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["client"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"clone","","",42,[[["self"]],["clientoptions"]]],[11,"default","","",42,[[],["clientoptions"]]],[11,"from","","",43,[[["t"]],["client"]]],[11,"from","","",42,N],[11,"from","","",42,[[["t"]],["clientoptions"]]],[11,"into_dsn","","",44,[[["self"]],["result",["option","dsnparseerror"]]]],[11,"from_config","","Creates a new Sentry client from a config.",43,[[["o"]],["client"]]],[11,"with_options","","Creates a new sentry client for the given options.",43,[[["clientoptions"]],["client"]]],[11,"options","","Returns the options of this client.",43,[[["self"]],["clientoptions"]]],[11,"dsn","","Returns the DSN that constructed this client.",43,[[["self"]],["option",["dsn"]]]],[11,"is_enabled","","Quick check to see if the client is enabled.",43,[[["self"]],["bool"]]],[11,"capture_event","","Captures an event and sends it to sentry.",43,[[["self"],["event"],["option",["scope"]]],["uuid"]]],[11,"close","","Drains all pending events and shuts down the transport behind the client.  After shutting down the transport is removed.",43,[[["self"],["option",["duration"]]],["bool"]]],[11,"into_breadcrumbs","","",18,N],[11,"new","","Creates a new hub from the given client and scope.",45,[[["option",["arc"]],["arc",["scope"]]],["hub"]]],[11,"new_from_top","","Creates a new hub based on the top scope of the given hub.",45,[[["h"]],["hub"]]],[11,"current","","Returns the current hub.",45,[[],["arc",["hub"]]]],[11,"main","","Returns the main thread's hub.",45,[[],["arc",["hub"]]]],[11,"with","","Invokes the callback with the default hub.",45,[[["f"]],["r"]]],[11,"with_active","","Like `Hub::with` but only calls the function if a client is bound.",45,[[["f"]],["r"]]],[11,"run","","Binds a hub to the current thread for the duration of the call.",45,[[["arc",["hub"]],["f"]],["r"]]],[11,"last_event_id","","Returns the last event id.",45,[[["self"]],["option",["uuid"]]]],[11,"capture_event","","Sends the event to the current client with the current scope.",45,[[["self"],["event"]],["uuid"]]],[11,"capture_message","","Captures an arbitrary message.",45,[[["self"],["str"],["level"]],["uuid"]]],[11,"client","","Returns the currently bound client.",45,[[["self"]],["option",["arc"]]]],[11,"bind_client","","Binds a new client to the hub.",45,[[["self"],["option",["arc"]]]]],[11,"push_scope","","Pushes a new scope.",45,[[["self"]],["scopeguard"]]],[11,"with_scope","","Temporarily pushes a scope for a single call optionally reconfiguring it.",45,[[["self"],["c"],["f"]],["r"]]],[11,"configure_scope","","Invokes a function that can modify the current scope.",45,[[["self"],["f"]],["r"]]],[11,"add_breadcrumb","","Adds a new breadcrumb to the current scope.",45,[[["self"],["b"]]]],[11,"clone","","",46,[[["self"]],["scope"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"default","","",46,[[],["scope"]]],[11,"clear","","Clear the scope.",46,[[["self"]]]],[11,"set_level","","Sets a level override.",46,[[["self"],["option",["level"]]]]],[11,"set_fingerprint","","Sets the fingerprint.",46,[[["self"],["option"]]]],[11,"set_transaction","","Sets the transaction.",46,[[["self"],["option",["str"]]]]],[11,"set_user","","Sets the user for the current scope.",46,[[["self"],["option",["user"]]]]],[11,"set_tag","","Sets a tag to a specific value.",46,[[["self"],["str"],["v"]]]],[11,"remove_tag","","Removes a tag.",46,[[["self"],["str"]]]],[11,"set_context","","Sets a context for a key.",46,[[["self"],["str"],["c"]]]],[11,"remove_context","","Removes a context for a key.",46,[[["self"],["str"]]]],[11,"set_extra","","Sets a extra to a specific value.",46,[[["self"],["str"],["value"]]]],[11,"remove_extra","","Removes a extra.",46,[[["self"],["str"]]]],[11,"add_event_processor","","Add an event processor to the scope.",46,[[["self"],["box",["fn"]]]]],[11,"apply_to_event","","Applies the contained scoped data to fill an event.",46,[[["self"],["event"]],["option",["event"]]]],[0,"integrations","","This module provides support for various integrations.",N,N],[0,"failure","sentry::integrations","Adds support for the failure crate.",N,N],[5,"exception_from_single_fail","sentry::integrations::failure","This converts a single fail instance into an exception.",N,[[["f"],["option",["backtrace"]]],["exception"]]],[5,"event_from_error","","Helper function to create an event from a `failure::Error`.",N,[[["error"]],["event"]]],[5,"event_from_fail","","Helper function to create an event from a `failure::Fail`.",N,[[["f"]],["event"]]],[5,"capture_error","","Captures a boxed failure (`failure::Error`).",N,[[["error"]],["uuid"]]],[5,"capture_fail","","Captures a `failure::Fail`.",N,[[["f"]],["uuid"]]],[8,"FailureHubExt","","Hub extension methods for working with failure.",N,N],[10,"capture_error","","Captures a boxed failure (`failure::Error`).",47,[[["self"],["error"]],["uuid"]]],[10,"capture_fail","","Captures a `failure::Fail`.",47,[[["self"],["f"]],["uuid"]]],[11,"capture_error","sentry","",45,[[["self"],["error"]],["uuid"]]],[11,"capture_fail","","",45,[[["self"],["f"]],["uuid"]]],[0,"log","sentry::integrations","Adds support for automatic breadcrumb capturing from logs.",N,N],[3,"LoggerOptions","sentry::integrations::log","Logger specific options.",N,N],[12,"global_filter","","The global filter that should be used (also used before dispatching to the nested logger).",48,N],[12,"filter","","The sentry specific log level filter (defaults to `Info`)",48,N],[12,"emit_breadcrumbs","","If set to `true`, breadcrumbs are emitted. (defaults to `true`)",48,N],[12,"emit_error_events","","If set to `true` error events are sent for errors in the log. (defaults to `true`)",48,N],[12,"emit_warning_events","","If set to `true` warning events are sent for warnings in the log. (defaults to `false`)",48,N],[3,"Logger","","Provides a dispatching logger.",N,N],[5,"breadcrumb_from_record","","Creates a breadcrumb from a given log record.",N,[[["record"]],["breadcrumb"]]],[5,"event_from_record","","Creates an event from a given log record.",N,[[["record"],["bool"]],["event"]]],[5,"init","","Initializes the logging system.",N,[[["option",["box"]],["loggeroptions"]]]],[11,"default","","",48,[[],["loggeroptions"]]],[11,"new","","Initializes a new logger.",49,[[["option",["box"]],["loggeroptions"]],["logger"]]],[11,"options","","Returns the options of the logger.",49,[[["self"]],["loggeroptions"]]],[11,"dest_log","","Returns the destination logger.",49,[[["self"]],["option",["log"]]]],[11,"enabled","","",49,[[["self"],["metadata"]],["bool"]]],[11,"log","","",49,[[["self"],["record"]]]],[11,"flush","","",49,[[["self"]]]],[0,"env_logger","sentry::integrations","Adds support for automatic breadcrumb capturing from logs with `env_logger`.",N,N],[5,"init","sentry::integrations::env_logger","Initializes the environment logger.",N,[[["option",["logger"]],["loggeroptions"]]]],[0,"panic","sentry::integrations","Panic handler support.",N,N],[5,"message_from_panic_info","sentry::integrations::panic","Extract the message of a panic.",N,[[["panicinfo"]],["str"]]],[5,"event_from_panic_info","","Creates an event from the given panic info.",N,[[["panicinfo"]],["event"]]],[5,"panic_handler","","A panic handler that sends to Sentry.",N,[[["panicinfo"]]]],[5,"register_panic_handler","","Registes the panic handler.",N,[[]]],[0,"utils","sentry","Useful utilities for working with events.",N,N],[5,"device_model","sentry::utils","Returns the model identifier.",N,[[],["option",["string"]]]],[5,"device_family","","Returns the model family identifier.",N,[[],["option",["string"]]]],[5,"cpu_arch","","Returns the CPU architecture.",N,[[],["option",["string"]]]],[5,"server_name","","Returns the server name (hostname) if available.",N,[[],["option",["string"]]]],[5,"os_context","","Returns the OS context",N,[[],["option",["context"]]]],[5,"rust_context","","Returns the rust info.",N,[[],["option",["context"]]]],[5,"device_context","","Returns the device context.",N,[[],["option",["context"]]]],[5,"debug_images","","Returns the loaded debug images.",N,[[],["vec",["debugimage"]]]],[5,"current_thread","","Captures information about the current thread.",N,[[["bool"]],["thread"]]],[5,"current_stacktrace","","Returns the current backtrace as sentry stacktrace.",N,[[],["option",["stacktrace"]]]],[0,"internals","sentry","Useful internals.",N,N],[3,"Auth","sentry::internals","Represents an auth header.",N,N],[4,"DsnParseError","","Represents a dsn url parsing error.",N,N],[13,"InvalidUrl","","raised on completely invalid urls",50,N],[13,"InvalidScheme","","raised the scheme is invalid / unsupported.",50,N],[13,"NoUsername","","raised if the username (public key) portion is missing.",50,N],[13,"NoProjectId","","raised the project is is missing (first path component)",50,N],[13,"InvalidProjectId","","raised the project id is invalid.",50,N],[3,"ProjectId","","Represents a project ID.",N,N],[4,"ProjectIdParseError","","Raised if a project ID cannot be parsed from a string.",N,N],[13,"InvalidValue","","Raised if the value is not an integer in the supported range.",51,N],[13,"EmptyValue","","Raised if an empty value is parsed.",51,N],[4,"Scheme","","Represents the scheme of an url http/https.",N,N],[13,"Http","","unencrypted HTTP scheme (should not be used)",52,N],[13,"Https","","encrypted HTTPS scheme",52,N],[3,"ClientInitGuard","","Helper struct that is returned from `init`.",N,N],[3,"ScopeGuard","","A scope guard.",N,N],[3,"DefaultTransportFactory","","Creates the default HTTP transport.",N,N],[3,"HttpTransport","","A transport can send events via HTTP to sentry.",N,N],[8,"IntoDsn","","Helper trait to convert a string into an `Option<Dsn>`.",N,N],[10,"into_dsn","","Converts the value into a `Result<Option<Dsn>, E>`.",53,[[["self"]],["result",["option","dsnparseerror"]]]],[8,"IntoBreadcrumbs","","A helper trait that converts an object into a breadcrumb.",N,N],[16,"Output","","The iterator type for the breadcrumbs.",54,N],[10,"into_breadcrumbs","","This converts the object into an optional breadcrumb.",54,N],[8,"Transport","","The trait for transports.",N,N],[10,"send_event","","Sends an event.",55,[[["self"],["event"]]]],[11,"shutdown","","Drains the queue if there is one.",55,[[["self"],["duration"]],["bool"]]],[8,"TransportFactory","","A factory creating transport instances.",N,N],[10,"create_transport","","Given some options creates a transport.",56,[[["self"],["clientoptions"]],["box",["transport"]]]],[14,"sentry_crate_release","sentry","Returns the intended release for Sentry as an `Option<Cow<'static, str>>`.",N,N],[11,"from_iter","sentry::protocol::map","",57,[[["t"]],["btreemap"]]],[11,"cmp","","",57,[[["self"],["btreemap"]],["ordering"]]],[11,"into_iter","","",57,[[["self"]],["intoiter"]]],[11,"clone","","",58,[[["self"]],["iter"]]],[11,"clone","","",57,[[["self"]],["btreemap"]]],[11,"clone","","",59,[[["self"]],["range"]]],[11,"clone","","",60,[[["self"]],["keys"]]],[11,"clone","","",61,[[["self"]],["values"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"next_back","","",63,[[["self"]],["option"]]],[11,"next_back","","",66,[[["self"]],["option"]]],[11,"next_back","","",64,[[["self"]],["option"]]],[11,"next_back","","",59,[[["self"]],["option"]]],[11,"next_back","","",60,[[["self"]],["option"]]],[11,"next_back","","",61,[[["self"]],["option"]]],[11,"next_back","","",62,[[["self"]],["option"]]],[11,"next_back","","",58,[[["self"]],["option"]]],[11,"next","","",62,[[["self"]],["option"]]],[11,"size_hint","","",62,N],[11,"next","","",58,[[["self"]],["option"]]],[11,"size_hint","","",58,N],[11,"next","","",64,[[["self"]],["option"]]],[11,"size_hint","","",64,N],[11,"next","","",66,[[["self"]],["option"]]],[11,"next","","",59,[[["self"]],["option"]]],[11,"next","","",60,[[["self"]],["option"]]],[11,"size_hint","","",60,N],[11,"next","","",61,[[["self"]],["option"]]],[11,"size_hint","","",61,N],[11,"next","","",63,[[["self"]],["option"]]],[11,"size_hint","","",63,N],[11,"extend","","",57,N],[11,"extend","","",57,N],[11,"drop","","",63,N],[11,"drop","","",57,N],[11,"index","","Returns a reference to the value corresponding to the supplied key.",57,[[["self"],["q"]],["v"]]],[11,"default","","Creates an empty `BTreeMap<K, V>`.",57,[[],["btreemap"]]],[11,"len","","",63,[[["self"]],["usize"]]],[11,"len","","",61,[[["self"]],["usize"]]],[11,"len","","",64,[[["self"]],["usize"]]],[11,"len","","",60,[[["self"]],["usize"]]],[11,"len","","",58,[[["self"]],["usize"]]],[11,"len","","",62,[[["self"]],["usize"]]],[11,"eq","","",57,[[["self"],["btreemap"]],["bool"]]],[11,"hash","","",57,N],[11,"partial_cmp","","",57,[[["self"],["btreemap"]],["option",["ordering"]]]],[11,"into_deserializer","","",57,N],[11,"deserialize","","",57,[[["d"]],["result",["btreemap"]]]],[11,"serialize","","",57,[[["self"],["s"]],["result"]]],[11,"fmt","sentry::protocol::value","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",68,[[["self"]],["map",["string","value"]]]],[11,"clone","","",0,[[["self"]],["value"]]],[11,"clone","","",69,[[["self"]],["number"]]],[11,"into_iter","","",68,N],[11,"from_str","","",69,[[["str"]],["result",["number"]]]],[11,"from_str","","",0,[[["str"]],["result",["value","error"]]]],[11,"default","","",68,[[],["map",["string","value"]]]],[11,"default","","",0,[[],["value"]]],[11,"from_iter","","Convert an iteratable type to a `Value`",0,[[["i"]],["value"]]],[11,"from_iter","","",68,[[["t"]],["map",["string","value"]]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","",68,[[["self"],["q"]],["value"]]],[11,"index","","",68,[[["self"],["q"]],["value"]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",69,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",69,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",69,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",69,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",69,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",69,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",69,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",69,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",69,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",69,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",69,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",69,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",69,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",69,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",69,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",69,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",69,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",69,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",69,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",69,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",69,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",69,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",69,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",69,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",69,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",69,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",69,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",69,N],[11,"deserialize_enum","","",69,N],[11,"deserialize_identifier","","",69,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",69,[[["self"],["v"]],["result"]]],[11,"deserialize","","",69,[[["d"]],["result",["number"]]]],[11,"deserialize","","",68,[[["d"]],["result",["map"]]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"serialize","","",68,[[["self"],["s"]],["result"]]],[11,"serialize","","",69,[[["self"],["s"]],["result"]]],[11,"from","","",69,[[["usize"]],["number"]]],[11,"from","","",0,[[["i32"]],["value"]]],[11,"from","","",0,[[["u64"]],["value"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["value"]]],[11,"from","","",69,[[["i8"]],["number"]]],[11,"from","","",0,[[["i64"]],["value"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["value"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from","","",69,[[["parsernumber"]],["number"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["value"]]],[11,"from","","",69,[[["u16"]],["number"]]],[11,"from","","",69,[[["i64"]],["number"]]],[11,"from","","",0,[[["u16"]],["value"]]],[11,"from","","",69,[[["u32"]],["number"]]],[11,"from","","",0,[[["i8"]],["value"]]],[11,"from","","",69,[[["u8"]],["number"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["value"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["value"]]],[11,"from","","",69,[[["i32"]],["number"]]],[11,"from","","",0,[[["u8"]],["value"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["value"]]],[11,"from","","",69,[[["u64"]],["number"]]],[11,"from","","",69,[[["isize"]],["number"]]],[11,"from","","",0,[[["isize"]],["value"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["value"]]],[11,"from","","",0,[[["usize"]],["value"]]],[11,"from","","",0,[[["u32"]],["value"]]],[11,"from","","",0,[[["i16"]],["value"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["value"]]],[11,"from","","",69,[[["i16"]],["number"]]],[11,"extend","","",68,N],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",68,[[["self"],["map"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",69,[[["self"],["number"]],["bool"]]],[11,"ne","","",69,[[["self"],["number"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"clone","sentry::protocol","",4,[[["self"]],["frame"]]],[11,"clone","","",35,[[["self"]],["runtimecontext"]]],[11,"clone","","",30,[[["self"]],["clientsdkpackage"]]],[11,"clone","","",28,[[["self"]],["reporeference"]]],[11,"clone","","",33,[[["self"]],["devicecontext"]]],[11,"clone","","",5,[[["self"]],["templateinfo"]]],[11,"clone","","",21,[[["self"]],["request"]]],[11,"clone","sentry","",17,[[["self"]],["level"]]],[11,"clone","sentry::protocol","",38,[[["self"]],["event"]]],[11,"clone","","",36,[[["self"]],["appcontext"]]],[11,"clone","","",7,[[["self"]],["threadid"]]],[11,"clone","","",19,[[["self"]],["ipaddress"]]],[11,"clone","","",9,[[["self"]],["regval"]]],[11,"clone","sentry::internals","",70,[[["self"]],["projectid"]]],[11,"clone","sentry::protocol","",24,[[["self"]],["appledebugimage"]]],[11,"clone","","",6,[[["self"]],["stacktrace"]]],[11,"clone","","",15,[[["self"]],["mechanism"]]],[11,"clone","sentry","",20,[[["self"]],["user"]]],[11,"clone","","",18,[[["self"]],["breadcrumb"]]],[11,"clone","sentry::internals","",71,[[["self"]],["auth"]]],[11,"clone","sentry::protocol","",27,[[["self"]],["debugmeta"]]],[11,"clone","","",12,[[["self"]],["machexception"]]],[11,"clone","sentry","",44,[[["self"]],["dsn"]]],[11,"clone","sentry::protocol","",22,[[["self"]],["systemsdkinfo"]]],[11,"clone","","",32,[[["self"]],["orientation"]]],[11,"clone","","",23,[[["self"]],["debugimage"]]],[11,"clone","","",8,[[["self"]],["addr"]]],[11,"clone","sentry::internals","",52,[[["self"]],["scheme"]]],[11,"clone","sentry::protocol","",26,[[["self"]],["proguarddebugimage"]]],[11,"clone","","",37,[[["self"]],["browsercontext"]]],[11,"clone","","",10,[[["self"]],["thread"]]],[11,"clone","","",34,[[["self"]],["oscontext"]]],[11,"clone","","",13,[[["self"]],["posixsignal"]]],[11,"clone","","",25,[[["self"]],["symbolicdebugimage"]]],[11,"clone","","",3,[[["self"]],["logentry"]]],[11,"clone","","",2,[[["self"]],["values"]]],[11,"clone","","",16,[[["self"]],["exception"]]],[11,"clone","","",11,[[["self"]],["cerror"]]],[11,"clone","","",14,[[["self"]],["mechanismmeta"]]],[11,"clone","","",29,[[["self"]],["clientsdkinfo"]]],[11,"clone","","",31,[[["self"]],["context"]]],[11,"fmt","sentry::internals","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::protocol","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::internals","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::protocol","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::internals","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::protocol","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::protocol","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::internals","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::protocol","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::internals","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::protocol","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",9,[[["self"],["regval"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["regval"]],["bool"]]],[11,"le","","",9,[[["self"],["regval"]],["bool"]]],[11,"gt","","",9,[[["self"],["regval"]],["bool"]]],[11,"ge","","",9,[[["self"],["regval"]],["bool"]]],[11,"partial_cmp","sentry","",17,[[["self"],["level"]],["option",["ordering"]]]],[11,"partial_cmp","sentry::protocol","",8,[[["self"],["addr"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["addr"]],["bool"]]],[11,"le","","",8,[[["self"],["addr"]],["bool"]]],[11,"gt","","",8,[[["self"],["addr"]],["bool"]]],[11,"ge","","",8,[[["self"],["addr"]],["bool"]]],[11,"partial_cmp","sentry::internals","",52,[[["self"],["scheme"]],["option",["ordering"]]]],[11,"partial_cmp","sentry::protocol","",19,[[["self"],["ipaddr"]],["option",["ordering"]]]],[11,"partial_cmp","sentry::internals","",70,[[["self"],["projectid"]],["option",["ordering"]]]],[11,"lt","","",70,[[["self"],["projectid"]],["bool"]]],[11,"le","","",70,[[["self"],["projectid"]],["bool"]]],[11,"gt","","",70,[[["self"],["projectid"]],["bool"]]],[11,"ge","","",70,[[["self"],["projectid"]],["bool"]]],[11,"partial_cmp","sentry::protocol","",19,[[["self"],["ipaddress"]],["option",["ordering"]]]],[11,"lt","","",19,[[["self"],["ipaddress"]],["bool"]]],[11,"le","","",19,[[["self"],["ipaddress"]],["bool"]]],[11,"gt","","",19,[[["self"],["ipaddress"]],["bool"]]],[11,"ge","","",19,[[["self"],["ipaddress"]],["bool"]]],[11,"partial_cmp","sentry::internals","",51,[[["self"],["projectidparseerror"]],["option",["ordering"]]]],[11,"partial_cmp","sentry::protocol","",7,[[["self"],["threadid"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["threadid"]],["bool"]]],[11,"le","","",7,[[["self"],["threadid"]],["bool"]]],[11,"gt","","",7,[[["self"],["threadid"]],["bool"]]],[11,"ge","","",7,[[["self"],["threadid"]],["bool"]]],[11,"into_iter","","",2,N],[11,"cmp","","",19,[[["self"],["ipaddress"]],["ordering"]]],[11,"cmp","sentry","",17,[[["self"],["level"]],["ordering"]]],[11,"cmp","sentry::protocol","",7,[[["self"],["threadid"]],["ordering"]]],[11,"cmp","","",8,[[["self"],["addr"]],["ordering"]]],[11,"cmp","sentry::internals","",52,[[["self"],["scheme"]],["ordering"]]],[11,"cmp","","",51,[[["self"],["projectidparseerror"]],["ordering"]]],[11,"cmp","sentry::protocol","",9,[[["self"],["regval"]],["ordering"]]],[11,"cmp","sentry::internals","",70,[[["self"],["projectid"]],["ordering"]]],[11,"from_str","sentry::protocol","",8,[[["str"]],["result",["addr","parseinterror"]]]],[11,"from_str","sentry","",44,[[["str"]],["result",["dsn","dsnparseerror"]]]],[11,"from_str","sentry::protocol","",19,[[["str"]],["result",["ipaddress","addrparseerror"]]]],[11,"from_str","sentry::internals","",70,[[["str"]],["result",["projectid","projectidparseerror"]]]],[11,"from_str","","",71,[[["str"]],["result",["auth","authparseerror"]]]],[11,"from_str","sentry::protocol","",9,[[["str"]],["result",["regval","parseinterror"]]]],[11,"from_str","sentry","",17,[[["str"]],["result",["level"]]]],[11,"from_iter","sentry::protocol","",2,[[["i"]],["values"]]],[11,"default","","",2,[[],["values"]]],[11,"default","","",6,[[],["stacktrace"]]],[11,"default","","",15,[[],["mechanism"]]],[11,"default","","",36,[[],["appcontext"]]],[11,"default","","",12,[[],["machexception"]]],[11,"default","","",11,[[],["cerror"]]],[11,"default","","",14,[[],["mechanismmeta"]]],[11,"default","sentry","",20,[[],["user"]]],[11,"default","sentry::protocol","",34,[[],["oscontext"]]],[11,"default","","",4,[[],["frame"]]],[11,"default","","",35,[[],["runtimecontext"]]],[11,"default","","",8,[[],["addr"]]],[11,"default","","",16,[[],["exception"]]],[11,"default","","",38,[[],["event"]]],[11,"default","sentry","",18,[[],["breadcrumb"]]],[11,"default","sentry::protocol","",33,[[],["devicecontext"]]],[11,"default","","",10,[[],["thread"]]],[11,"default","sentry","",17,[[],["level"]]],[11,"default","sentry::protocol","",19,[[],["ipaddress"]]],[11,"default","","",5,[[],["templateinfo"]]],[11,"default","","",9,[[],["regval"]]],[11,"default","","",21,[[],["request"]]],[11,"default","","",7,[[],["threadid"]]],[11,"default","","",37,[[],["browsercontext"]]],[11,"default","","",13,[[],["posixsignal"]]],[11,"default","","",3,[[],["logentry"]]],[11,"default","","",27,[[],["debugmeta"]]],[11,"deref_mut","","",2,N],[11,"deserialize","sentry","",20,[[["__d"]],["result",["user"]]]],[11,"deserialize","","",18,[[["__d"]],["result",["breadcrumb"]]]],[11,"deserialize","sentry::protocol","",10,[[["__d"]],["result",["thread"]]]],[11,"deserialize","","",38,[[["__d"]],["result",["event"]]]],[11,"deserialize","","",9,[[["d"]],["result",["regval"]]]],[11,"deserialize","","",14,[[["__d"]],["result",["mechanismmeta"]]]],[11,"deserialize","","",23,[[["__d"]],["result",["debugimage"]]]],[11,"deserialize","","",31,[[["__d"]],["result",["context"]]]],[11,"deserialize","","",35,[[["__d"]],["result",["runtimecontext"]]]],[11,"deserialize","","",12,[[["__d"]],["result",["machexception"]]]],[11,"deserialize","","",34,[[["__d"]],["result",["oscontext"]]]],[11,"deserialize","","",4,[[["__d"]],["result",["frame"]]]],[11,"deserialize","","",37,[[["__d"]],["result",["browsercontext"]]]],[11,"deserialize","","",6,[[["__d"]],["result",["stacktrace"]]]],[11,"deserialize","","",36,[[["__d"]],["result",["appcontext"]]]],[11,"deserialize","","",28,[[["__d"]],["result",["reporeference"]]]],[11,"deserialize","","",16,[[["__d"]],["result",["exception"]]]],[11,"deserialize","","",7,[[["__d"]],["result",["threadid"]]]],[11,"deserialize","","",19,[[["d"]],["result",["ipaddress"]]]],[11,"deserialize","","",8,[[["d"]],["result",["addr"]]]],[11,"deserialize","sentry","",17,[[["d"]],["result",["level"]]]],[11,"deserialize","sentry::protocol","",5,[[["__d"]],["result",["templateinfo"]]]],[11,"deserialize","","",15,[[["__d"]],["result",["mechanism"]]]],[11,"deserialize","","",25,[[["__d"]],["result",["symbolicdebugimage"]]]],[11,"deserialize","","",3,[[["__d"]],["result",["logentry"]]]],[11,"deserialize","","",2,[[["__d"]],["result",["values"]]]],[11,"deserialize","","",26,[[["__d"]],["result",["proguarddebugimage"]]]],[11,"deserialize","sentry::internals","",70,[[["d"]],["result",["projectid"]]]],[11,"deserialize","sentry","",44,[[["d"]],["result",["dsn"]]]],[11,"deserialize","sentry::protocol","",24,[[["__d"]],["result",["appledebugimage"]]]],[11,"deserialize","","",33,[[["__d"]],["result",["devicecontext"]]]],[11,"deserialize","","",32,[[["__d"]],["result",["orientation"]]]],[11,"deserialize","","",22,[[["__d"]],["result",["systemsdkinfo"]]]],[11,"deserialize","sentry::internals","",71,[[["__d"]],["result",["auth"]]]],[11,"deserialize","sentry::protocol","",27,[[["__d"]],["result",["debugmeta"]]]],[11,"deserialize","","",30,[[["__d"]],["result",["clientsdkpackage"]]]],[11,"deserialize","","",11,[[["__d"]],["result",["cerror"]]]],[11,"deserialize","","",13,[[["__d"]],["result",["posixsignal"]]]],[11,"deserialize","","",21,[[["__d"]],["result",["request"]]]],[11,"deserialize","","",29,[[["__d"]],["result",["clientsdkinfo"]]]],[11,"serialize","","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","","",32,[[["self"],["__s"]],["result"]]],[11,"serialize","","",9,[[["self"],["s"]],["result"]]],[11,"serialize","","",34,[[["self"],["__s"]],["result"]]],[11,"serialize","","",28,[[["self"],["__s"]],["result"]]],[11,"serialize","","",14,[[["self"],["__s"]],["result"]]],[11,"serialize","","",25,[[["self"],["__s"]],["result"]]],[11,"serialize","sentry::internals","",71,[[["self"],["__s"]],["result"]]],[11,"serialize","sentry::protocol","",31,[[["self"],["__s"]],["result"]]],[11,"serialize","","",35,[[["self"],["__s"]],["result"]]],[11,"serialize","","",2,[[["self"],["__s"]],["result"]]],[11,"serialize","sentry","",20,[[["self"],["__s"]],["result"]]],[11,"serialize","sentry::protocol","",21,[[["self"],["__s"]],["result"]]],[11,"serialize","","",37,[[["self"],["__s"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",8,[[["self"],["s"]],["result"]]],[11,"serialize","sentry","",17,[[["self"],["s"]],["result"]]],[11,"serialize","sentry::protocol","",29,[[["self"],["__s"]],["result"]]],[11,"serialize","","",19,[[["self"],["s"]],["result"]]],[11,"serialize","","",27,[[["self"],["__s"]],["result"]]],[11,"serialize","","",38,[[["self"],["__s"]],["result"]]],[11,"serialize","","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","","",30,[[["self"],["__s"]],["result"]]],[11,"serialize","","",23,[[["self"],["__s"]],["result"]]],[11,"serialize","","",12,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]],[11,"serialize","","",15,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","","",13,[[["self"],["__s"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","sentry","",44,[[["self"],["s"]],["result"]]],[11,"serialize","sentry::protocol","",24,[[["self"],["__s"]],["result"]]],[11,"serialize","sentry::internals","",70,[[["self"],["s"]],["result"]]],[11,"serialize","sentry::protocol","",36,[[["self"],["__s"]],["result"]]],[11,"serialize","","",33,[[["self"],["__s"]],["result"]]],[11,"serialize","","",26,[[["self"],["__s"]],["result"]]],[11,"serialize","sentry","",18,[[["self"],["__s"]],["result"]]],[11,"serialize","sentry::protocol","",22,[[["self"],["__s"]],["result"]]],[11,"serialize","","",16,[[["self"],["__s"]],["result"]]],[11,"serialize","","",11,[[["self"],["__s"]],["result"]]],[11,"hash","","",19,N],[11,"hash","","",7,N],[11,"hash","","",9,N],[11,"hash","sentry::internals","",70,N],[11,"hash","sentry::protocol","",32,N],[11,"hash","sentry","",44,N],[11,"hash","sentry::internals","",52,N],[11,"hash","sentry","",17,N],[11,"hash","sentry::protocol","",8,N],[11,"as_mut","","",2,[[["self"]],["vec"]]],[11,"deref","","",2,N],[11,"as_ref","","",2,N],[11,"extend","","",2,N],[11,"from","","",31,[[["runtimecontext"]],["context"]]],[11,"from","","",8,[[["i32"]],["addr"]]],[11,"from","","",8,N],[11,"from","sentry::internals","",70,[[["u16"]],["projectid"]]],[11,"from","sentry::protocol","",8,[[["u32"]],["addr"]]],[11,"from","","",31,[[["browsercontext"]],["context"]]],[11,"from","sentry::internals","",70,[[["usize"]],["projectid"]]],[11,"from","sentry::protocol","",9,N],[11,"from","sentry::internals","",70,[[["i32"]],["projectid"]]],[11,"from","","",70,[[["i8"]],["projectid"]]],[11,"from","sentry::protocol","",9,N],[11,"from","","",8,[[["usize"]],["addr"]]],[11,"from","","",13,N],[11,"from","","",23,[[["proguarddebugimage"]],["debugimage"]]],[11,"from","","",9,[[["i32"]],["regval"]]],[11,"from","","",9,[[["usize"]],["regval"]]],[11,"from","sentry::internals","",70,[[["u32"]],["projectid"]]],[11,"from","sentry::protocol","",23,[[["appledebugimage"]],["debugimage"]]],[11,"from","","",23,[[["symbolicdebugimage"]],["debugimage"]]],[11,"from","","",8,[[["u64"]],["addr"]]],[11,"from","","",13,[[["i32"]],["posixsignal"]]],[11,"from","","",9,[[["u64"]],["regval"]]],[11,"from","","",7,[[["string"]],["threadid"]]],[11,"from","","",8,N],[11,"from","","",19,[[["ipaddr"]],["ipaddress"]]],[11,"from","","",11,[[["i32"]],["cerror"]]],[11,"from","sentry::internals","",70,[[["i64"]],["projectid"]]],[11,"from","","",70,[[["u64"]],["projectid"]]],[11,"from","sentry::protocol","",31,[[["appcontext"]],["context"]]],[11,"from","","",7,[[["u32"]],["threadid"]]],[11,"from","sentry::internals","",70,[[["u8"]],["projectid"]]],[11,"from","sentry::protocol","",9,[[["u32"]],["regval"]]],[11,"from","","",7,[[["str"]],["threadid"]]],[11,"from","","",2,[[["vec"]],["values"]]],[11,"from","","",7,[[["i64"]],["threadid"]]],[11,"from","","",7,[[["u16"]],["threadid"]]],[11,"from","","",31,[[["oscontext"]],["context"]]],[11,"from","","",31,[[["devicecontext"]],["context"]]],[11,"from","","",7,[[["i32"]],["threadid"]]],[11,"from","sentry::internals","",70,[[["i16"]],["projectid"]]],[11,"cause","","",51,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",51,[[["self"]],["option",["backtrace"]]]],[11,"cause","","",50,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",50,[[["self"]],["option",["backtrace"]]]],[11,"cause","sentry::protocol","",72,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",72,[[["self"]],["option",["backtrace"]]]],[11,"into","","",8,[[["self"]],["u64"]]],[11,"into","","",9,[[["self"]],["u64"]]],[11,"into","","",13,[[["self"]],["i32"]]],[11,"into","","",11,[[["self"]],["i32"]]],[11,"fmt","sentry","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::protocol","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::protocol","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::internals","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::protocol","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::internals","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::protocol","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",16,[[["self"],["exception"]],["bool"]]],[11,"ne","","",16,[[["self"],["exception"]],["bool"]]],[11,"eq","","",9,[[["self"],["regval"]],["bool"]]],[11,"ne","","",9,[[["self"],["regval"]],["bool"]]],[11,"eq","","",7,[[["self"],["threadid"]],["bool"]]],[11,"ne","","",7,[[["self"],["threadid"]],["bool"]]],[11,"eq","","",30,[[["self"],["clientsdkpackage"]],["bool"]]],[11,"ne","","",30,[[["self"],["clientsdkpackage"]],["bool"]]],[11,"eq","","",22,[[["self"],["systemsdkinfo"]],["bool"]]],[11,"ne","","",22,[[["self"],["systemsdkinfo"]],["bool"]]],[11,"eq","","",19,[[["self"],["ipaddr"]],["bool"]]],[11,"eq","","",26,[[["self"],["proguarddebugimage"]],["bool"]]],[11,"ne","","",26,[[["self"],["proguarddebugimage"]],["bool"]]],[11,"eq","","",33,[[["self"],["devicecontext"]],["bool"]]],[11,"ne","","",33,[[["self"],["devicecontext"]],["bool"]]],[11,"eq","","",31,[[["self"],["context"]],["bool"]]],[11,"ne","","",31,[[["self"],["context"]],["bool"]]],[11,"eq","","",6,[[["self"],["stacktrace"]],["bool"]]],[11,"ne","","",6,[[["self"],["stacktrace"]],["bool"]]],[11,"eq","","",13,[[["self"],["posixsignal"]],["bool"]]],[11,"ne","","",13,[[["self"],["posixsignal"]],["bool"]]],[11,"eq","sentry","",44,[[["self"],["dsn"]],["bool"]]],[11,"ne","","",44,[[["self"],["dsn"]],["bool"]]],[11,"eq","sentry::protocol","",11,[[["self"],["cerror"]],["bool"]]],[11,"ne","","",11,[[["self"],["cerror"]],["bool"]]],[11,"eq","","",38,[[["self"],["event"]],["bool"]]],[11,"ne","","",38,[[["self"],["event"]],["bool"]]],[11,"eq","","",34,[[["self"],["oscontext"]],["bool"]]],[11,"ne","","",34,[[["self"],["oscontext"]],["bool"]]],[11,"eq","sentry::internals","",51,[[["self"],["projectidparseerror"]],["bool"]]],[11,"eq","","",70,[[["self"],["projectid"]],["bool"]]],[11,"ne","","",70,[[["self"],["projectid"]],["bool"]]],[11,"eq","sentry::protocol","",37,[[["self"],["browsercontext"]],["bool"]]],[11,"ne","","",37,[[["self"],["browsercontext"]],["bool"]]],[11,"eq","","",32,[[["self"],["orientation"]],["bool"]]],[11,"eq","","",8,[[["self"],["addr"]],["bool"]]],[11,"ne","","",8,[[["self"],["addr"]],["bool"]]],[11,"eq","","",19,[[["self"],["ipaddress"]],["bool"]]],[11,"ne","","",19,[[["self"],["ipaddress"]],["bool"]]],[11,"eq","","",2,[[["self"],["values"]],["bool"]]],[11,"ne","","",2,[[["self"],["values"]],["bool"]]],[11,"eq","","",3,[[["self"],["logentry"]],["bool"]]],[11,"ne","","",3,[[["self"],["logentry"]],["bool"]]],[11,"eq","sentry","",17,[[["self"],["level"]],["bool"]]],[11,"eq","sentry::protocol","",12,[[["self"],["machexception"]],["bool"]]],[11,"ne","","",12,[[["self"],["machexception"]],["bool"]]],[11,"eq","","",27,[[["self"],["debugmeta"]],["bool"]]],[11,"ne","","",27,[[["self"],["debugmeta"]],["bool"]]],[11,"eq","","",29,[[["self"],["clientsdkinfo"]],["bool"]]],[11,"ne","","",29,[[["self"],["clientsdkinfo"]],["bool"]]],[11,"eq","","",24,[[["self"],["appledebugimage"]],["bool"]]],[11,"ne","","",24,[[["self"],["appledebugimage"]],["bool"]]],[11,"eq","","",15,[[["self"],["mechanism"]],["bool"]]],[11,"ne","","",15,[[["self"],["mechanism"]],["bool"]]],[11,"eq","","",23,[[["self"],["debugimage"]],["bool"]]],[11,"ne","","",23,[[["self"],["debugimage"]],["bool"]]],[11,"eq","","",21,[[["self"],["request"]],["bool"]]],[11,"ne","","",21,[[["self"],["request"]],["bool"]]],[11,"eq","","",36,[[["self"],["appcontext"]],["bool"]]],[11,"ne","","",36,[[["self"],["appcontext"]],["bool"]]],[11,"eq","sentry","",20,[[["self"],["user"]],["bool"]]],[11,"ne","","",20,[[["self"],["user"]],["bool"]]],[11,"eq","sentry::protocol","",28,[[["self"],["reporeference"]],["bool"]]],[11,"ne","","",28,[[["self"],["reporeference"]],["bool"]]],[11,"eq","","",14,[[["self"],["mechanismmeta"]],["bool"]]],[11,"ne","","",14,[[["self"],["mechanismmeta"]],["bool"]]],[11,"eq","","",4,[[["self"],["frame"]],["bool"]]],[11,"ne","","",4,[[["self"],["frame"]],["bool"]]],[11,"eq","","",25,[[["self"],["symbolicdebugimage"]],["bool"]]],[11,"ne","","",25,[[["self"],["symbolicdebugimage"]],["bool"]]],[11,"eq","sentry","",18,[[["self"],["breadcrumb"]],["bool"]]],[11,"ne","","",18,[[["self"],["breadcrumb"]],["bool"]]],[11,"eq","sentry::protocol","",35,[[["self"],["runtimecontext"]],["bool"]]],[11,"ne","","",35,[[["self"],["runtimecontext"]],["bool"]]],[11,"eq","","",5,[[["self"],["templateinfo"]],["bool"]]],[11,"ne","","",5,[[["self"],["templateinfo"]],["bool"]]],[11,"eq","sentry::internals","",52,[[["self"],["scheme"]],["bool"]]],[11,"eq","sentry::protocol","",10,[[["self"],["thread"]],["bool"]]],[11,"ne","","",10,[[["self"],["thread"]],["bool"]]],[11,"clone","sentry","",73,[[["self"]],["parseerror"]]],[11,"clone","","",74,[[["self"]],["datetime"]]],[11,"clone","","",75,[[["self"]],["utc"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"add","","",74,[[["self"],["fixedoffset"]],["datetime"]]],[11,"add","","",74,[[["self"],["duration"]],["datetime"]]],[11,"deserialize","","",74,[[["d"]],["result",["datetime"]]]],[11,"deserialize","","",74,[[["d"]],["result",["datetime"]]]],[11,"deserialize","","",74,[[["d"]],["result",["datetime"]]]],[11,"partial_cmp","","",74,[[["self"],["datetime"]],["option",["ordering"]]]],[11,"serialize","","Serialize into a rfc3339 time string",74,[[["self"],["s"]],["result"]]],[11,"description","","",73,[[["self"]],["str"]]],[11,"fix","","",75,[[["self"]],["fixedoffset"]]],[11,"cmp","","",74,[[["self"],["datetime"]],["ordering"]]],[11,"sub","","",74,[[["self"],["datetime"]],["duration"]]],[11,"sub","","",74,[[["self"],["fixedoffset"]],["datetime"]]],[11,"sub","","",74,[[["self"],["duration"]],["datetime"]]],[11,"from_str","","",74,[[["str"]],["result",["datetime","parseerror"]]]],[11,"from_str","","",74,[[["str"]],["result",["datetime","parseerror"]]]],[11,"from_str","","",74,[[["str"]],["result",["datetime","parseerror"]]]],[11,"hash","","",74,N],[11,"hour","","",74,[[["self"]],["u32"]]],[11,"minute","","",74,[[["self"]],["u32"]]],[11,"second","","",74,[[["self"]],["u32"]]],[11,"nanosecond","","",74,[[["self"]],["u32"]]],[11,"with_hour","","",74,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_minute","","",74,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_second","","",74,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_nanosecond","","",74,[[["self"],["u32"]],["option",["datetime"]]]],[11,"from","","",74,[[["systemtime"]],["datetime",["utc"]]]],[11,"from","","",74,[[["systemtime"]],["datetime",["local"]]]],[11,"year","","",74,[[["self"]],["i32"]]],[11,"month","","",74,[[["self"]],["u32"]]],[11,"month0","","",74,[[["self"]],["u32"]]],[11,"day","","",74,[[["self"]],["u32"]]],[11,"day0","","",74,[[["self"]],["u32"]]],[11,"ordinal","","",74,[[["self"]],["u32"]]],[11,"ordinal0","","",74,[[["self"]],["u32"]]],[11,"weekday","","",74,[[["self"]],["weekday"]]],[11,"iso_week","","",74,[[["self"]],["isoweek"]]],[11,"with_year","","",74,[[["self"],["i32"]],["option",["datetime"]]]],[11,"with_month","","",74,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_month0","","",74,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_day","","",74,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_day0","","",74,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_ordinal","","",74,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_ordinal0","","",74,[[["self"],["u32"]],["option",["datetime"]]]],[11,"from_offset","","",75,[[["utc"]],["utc"]]],[11,"offset_from_local_date","","",75,[[["self"],["naivedate"]],["localresult",["utc"]]]],[11,"offset_from_local_datetime","","",75,[[["self"],["naivedatetime"]],["localresult",["utc"]]]],[11,"offset_from_utc_date","","",75,[[["self"],["naivedate"]],["utc"]]],[11,"offset_from_utc_datetime","","",75,[[["self"],["naivedatetime"]],["utc"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",75,[[["self"],["utc"]],["bool"]]],[11,"eq","","",74,[[["self"],["datetime"]],["bool"]]],[11,"eq","","",73,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",73,[[["self"],["parseerror"]],["bool"]]],[11,"clone","","",76,[[["self"]],["parsedebugiderror"]]],[11,"clone","","",77,[[["self"]],["debugid"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::protocol::debugid","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","sentry","",77,[[["self"],["debugid"]],["option",["ordering"]]]],[11,"lt","","",77,[[["self"],["debugid"]],["bool"]]],[11,"le","","",77,[[["self"],["debugid"]],["bool"]]],[11,"gt","","",77,[[["self"],["debugid"]],["bool"]]],[11,"ge","","",77,[[["self"],["debugid"]],["bool"]]],[11,"description","","",76,[[["self"]],["str"]]],[11,"cmp","","",77,[[["self"],["debugid"]],["ordering"]]],[11,"from_str","","",77,[[["str"]],["result",["debugid","parsedebugiderror"]]]],[11,"default","","",77,[[],["debugid"]]],[11,"hash","","",77,N],[11,"deserialize","","",77,[[["d"]],["result",["debugid"]]]],[11,"from","","",77,[[["uuid"]],["debugid"]]],[11,"from","","",77,N],[11,"serialize","","",77,[[["self"],["s"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry::protocol::debugid","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sentry","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",77,[[["self"],["debugid"]],["bool"]]],[11,"ne","","",77,[[["self"],["debugid"]],["bool"]]],[11,"eq","","",76,[[["self"],["parsedebugiderror"]],["bool"]]],[11,"clone","","",79,[[["self"]],["uuid"]]],[11,"clone","","",40,[[["self"]],["variant"]]],[11,"clone","","",41,[[["self"]],["version"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",79,[[["self"],["uuid"]],["option",["ordering"]]]],[11,"lt","","",79,[[["self"],["uuid"]],["bool"]]],[11,"le","","",79,[[["self"],["uuid"]],["bool"]]],[11,"gt","","",79,[[["self"],["uuid"]],["bool"]]],[11,"ge","","",79,[[["self"],["uuid"]],["bool"]]],[11,"cmp","","",79,[[["self"],["uuid"]],["ordering"]]],[11,"from_str","","",79,[[["str"]],["result",["uuid"]]]],[11,"default","","",79,[[],["uuid"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",79,N],[11,"deserialize","","",79,[[["d"]],["result",["uuid"]]]],[11,"serialize","","",79,[[["self"],["s"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",40,[[["self"],["variant"]],["bool"]]],[11,"eq","","",41,[[["self"],["version"]],["bool"]]],[11,"eq","","",79,[[["self"],["uuid"]],["bool"]]],[11,"ne","","",79,[[["self"],["uuid"]],["bool"]]],[11,"is_i64","sentry::protocol::value","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",69,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",69,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",69,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",69,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",69,[[["self"]],["option",["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",69,[[["self"]],["option",["f64"]]]],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",69,[[["f64"]],["option",["number"]]]],[11,"new","","Makes a new empty Map.",68,[[],["map",["string","value"]]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",68,[[["usize"]],["map",["string","value"]]]],[11,"clear","","Clears the map, removing all values.",68,N],[11,"get","","Returns a reference to the value corresponding to the key.",68,[[["self"],["q"]],["option",["value"]]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",68,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",68,[[["self"],["q"]],["option",["value"]]]],[11,"insert","","Inserts a key-value pair into the map.",68,[[["self"],["string"],["value"]],["option",["value"]]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",68,[[["self"],["q"]],["option",["value"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",68,[[["self"],["s"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",68,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",68,[[["self"]],["bool"]]],[11,"iter","","Gets an iterator over the entries of the map.",68,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",68,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map.",68,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map.",68,[[["self"]],["values"]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",68,[[["self"]],["valuesmut"]]],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]],[11,"key","sentry::protocol::map","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",67,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",67,[[["self"]],["k"]]],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",67,[[["self"],["v"]],["v"]]],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",57,[[],["btreemap"]]],[11,"clear","","Clears the map, removing all values.",57,N],[11,"get","","Returns a reference to the value corresponding to the key.",57,[[["self"],["q"]],["option"]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied key.",57,[[["self"],["q"]],["option"]]],[11,"contains_key","","Returns `true` if the map contains a value for the specified key.",57,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",57,[[["self"],["q"]],["option"]]],[11,"insert","","Inserts a key-value pair into the map.",57,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",57,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",57,N],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",57,[[["self"],["r"]],["range"]]],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",57,[[["self"],["r"]],["rangemut"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",57,[[["self"],["k"]],["entry"]]],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",57,[[["self"],["q"]],["btreemap"]]],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",57,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",57,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",57,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map, in order by key.",57,[[["self"]],["values"]]],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",57,[[["self"]],["valuesmut"]]],[11,"len","","Returns the number of elements in the map.",57,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",57,[[["self"]],["bool"]]],[11,"key","","Gets a reference to the key in the entry.",65,[[["self"]],["k"]]],[11,"remove_entry","","Take ownership of the key and value from the map.",65,N],[11,"get","","Gets a reference to the value in the entry.",65,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",65,[[["self"]],["v"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",65,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",65,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",65,[[["self"]],["v"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",1,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",1,[[["self"],["f"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",1,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",1,[[["self"],["f"]],["entry"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",1,[[["self"]],["v"]]],[11,"from_uuid","sentry","Constructs a `DebugId` from its `uuid`.",77,[[["uuid"]],["debugid"]]],[11,"from_parts","","Constructs a `DebugId` from its `uuid` and `appendix` parts.",77,[[["uuid"],["u32"]],["debugid"]]],[11,"from_breakpad","","Parses a breakpad identifier from a string.",77,[[["str"]],["result",["debugid","parsedebugiderror"]]]],[11,"uuid","","Returns the UUID part of the code module's debug_identifier.",77,[[["self"]],["uuid"]]],[11,"appendix","","Returns the appendix part of the code module's debug identifier.",77,[[["self"]],["u32"]]],[11,"breakpad","","Returns a wrapper which when formatted via `fmt::Display` will format a a breakpad identifier.",77,[[["self"]],["breakpadformat"]]],[11,"new","sentry::protocol","Creates an empty values struct.",2,[[],["values"]]],[11,"is_empty","","Checks whether this struct is empty in both values and data.",2,[[["self"]],["bool"]]],[11,"from_frames_reversed","","Optionally creates a stacktrace from a list of stack frames.",6,[[["vec",["frame"]]],["option",["stacktrace"]]]],[11,"is_null","","Returns `true` if this address is the null pointer.",8,[[["self"]],["bool"]]],[11,"is_debug","sentry","A quick way to check if the level is `debug`.",17,[[["self"]],["bool"]]],[11,"is_info","","A quick way to check if the level is `info`.",17,[[["self"]],["bool"]]],[11,"is_warning","","A quick way to check if the level is `warning`.",17,[[["self"]],["bool"]]],[11,"is_error","","A quick way to check if the level is `error`.",17,[[["self"]],["bool"]]],[11,"is_fatal","","A quick way to check if the level is `fatal`.",17,[[["self"]],["bool"]]],[11,"type_name","sentry::protocol","Returns the name of the type on sentry.",23,[[["self"]],["str"]]],[11,"is_empty","","Returns true if the debug meta is empty.",27,[[["self"]],["bool"]]],[11,"type_name","","Returns the name of the type for sentry.",31,[[["self"]],["str"]]],[11,"new","","Creates a new event with the current timestamp and random id.",38,[[],["event"]]],[11,"into_owned","","Creates a fully owned version of the event.",38,[[["self"]],["event"]]],[11,"from_utc","sentry","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",74,N],[11,"date","","Retrieves a date component.",74,[[["self"]],["date"]]],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",74,[[["self"]],["naivetime"]]],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",74,[[["self"]],["i64"]]],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January 1, 1970 UTC",74,[[["self"]],["i64"]]],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January 1, 1970 UTC",74,[[["self"]],["i64"]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",74,[[["self"]],["u32"]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",74,[[["self"]],["u32"]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",74,[[["self"]],["u32"]]],[11,"offset","","Retrieves an associated offset from UTC.",74,N],[11,"timezone","","Retrieves an associated time zone.",74,[[["self"]],["tz"]]],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",74,[[["self"],["tz2"]],["datetime"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",74,[[["self"],["duration"]],["option",["datetime"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",74,[[["self"],["duration"]],["option",["datetime"]]]],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",74,[[["self"],["datetime"]],["duration"]]],[11,"naive_utc","","Returns a view to the naive UTC datetime.",74,[[["self"]],["naivedatetime"]]],[11,"naive_local","","Returns a view to the naive local datetime.",74,[[["self"]],["naivedatetime"]]],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",74,[[["str"]],["result",["datetime","parseerror"]]]],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",74,[[["str"]],["result",["datetime","parseerror"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",74,[[["str"],["str"]],["result",["datetime","parseerror"]]]],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",74,[[["self"]],["string"]]],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",74,[[["self"]],["string"]]],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with subseconds formatted as per a `SecondsFormat`. If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as per Fixed::TimezoneOffsetColonZ. If passed `use_z` false, use Fixed::TimezoneOffsetColon.",74,[[["self"],["secondsformat"],["bool"]],["string"]]],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",74,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",74,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"to_auth","","Converts the dsn into an auth object.",44,[[["self"],["option",["str"]]],["auth"]]],[11,"store_api_url","","Returns the submission API URL.",44,[[["self"]],["url"]]],[11,"scheme","","Returns the scheme",44,[[["self"]],["scheme"]]],[11,"public_key","","Returns the public_key",44,[[["self"]],["str"]]],[11,"secret_key","","Returns secret_key",44,[[["self"]],["option",["str"]]]],[11,"host","","Returns the host",44,[[["self"]],["str"]]],[11,"port","","Returns the port",44,[[["self"]],["u16"]]],[11,"project_id","","Returns the project_id",44,[[["self"]],["projectid"]]],[11,"today","","Returns a `Date` which corresponds to the current date.",75,[[],["date",["utc"]]]],[11,"now","","Returns a `DateTime` which corresponds to the current date.",75,[[],["datetime",["utc"]]]],[11,"to_hyphenated","","Creates a [`Hyphenated`] instance from a [`Uuid`].",79,[[["self"]],["hyphenated"]]],[11,"to_hyphenated_ref","","Creates a [`HyphenatedRef`] instance from a [`Uuid`] reference.",79,[[["self"]],["hyphenatedref"]]],[11,"to_simple","","Creates a [`Simple`] instance from a [`Uuid`].",79,[[["self"]],["simple"]]],[11,"to_simple_ref","","Creates a [`SimpleRef`] instance from a [`Uuid`] reference.",79,[[["self"]],["simpleref"]]],[11,"to_urn","","Creates a [`Urn`] instance from a [`Uuid`].",79,[[["self"]],["urn"]]],[11,"to_urn_ref","","Creates a [`UrnRef`] instance from a [`Uuid`] reference.",79,[[["self"]],["urnref"]]],[11,"new_v4","","Creates a random [`Uuid`].",79,[[],["uuid"]]],[18,"NAMESPACE_DNS","","[`Uuid`] namespace for Domain Name System (DNS).",79,N],[18,"NAMESPACE_OID","","[`Uuid`] namespace for ISO Object Identifiers (OIDs).",79,N],[18,"NAMESPACE_URL","","[`Uuid`] namespace for Uniform Resource Locators (URLs).",79,N],[18,"NAMESPACE_X500","","[`Uuid`] namespace for X.500 Distinguished Names (DNs).",79,N],[11,"nil","","The 'nil UUID'.",79,[[],["uuid"]]],[11,"from_fields","","Creates a `Uuid` from four field values.",79,N],[11,"from_slice","","Creates a `Uuid` using the supplied bytes.",79,N],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",79,N],[11,"from_random_bytes","","Creates a v4 Uuid from random bytes (e.g. bytes supplied from `Rand` crate)",79,N],[11,"get_variant","","Returns the variant of the `Uuid` structure.",79,[[["self"]],["option",["variant"]]]],[11,"get_version_num","","Returns the version number of the `Uuid`.",79,[[["self"]],["usize"]]],[11,"get_version","","Returns the version of the `Uuid`.",79,[[["self"]],["option",["version"]]]],[11,"as_fields","","Returns the four field values of the UUID.",79,N],[11,"as_bytes","","Returns an array of 16 octets containing the UUID data.",79,N],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and counter portion of a V1 UUID.  If the supplied UUID is not V1, this will return None",79,[[["self"]],["option"]]],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",79,[[["str"]],["result",["uuid","parseerror"]]]],[11,"is_nil","","Tests if the UUID is nil",79,[[["self"]],["bool"]]],[11,"from_pairs","sentry::internals","Creates an auth header from key value pairs.",71,[[["i"]],["result",["auth","authparseerror"]]]],[11,"from_querystring","","Creates an auth header from a query string.",71,N],[11,"timestamp","","Returns the unix timestamp the client defined",71,[[["self"]],["option",["datetime"]]]],[11,"version","","Returns the protocol version the client speaks",71,[[["self"]],["u16"]]],[11,"public_key","","Returns the public key",71,[[["self"]],["str"]]],[11,"secret_key","","Returns the client's secret if it authenticated with a secret.",71,[[["self"]],["option",["str"]]]],[11,"is_public","","Returns true if the authentication implies public auth (no secret)",71,[[["self"]],["bool"]]],[11,"client_agent","","Returns the client's agent",71,[[["self"]],["option",["str"]]]],[11,"default_port","","Returns the default port for this scheme.",52,[[["self"]],["u16"]]],[11,"is_enabled","","Quick check if the client is enabled.",80,[[["self"]],["bool"]]],[11,"drop","","",80,[[["self"]]]],[11,"default","","",81,[[],["scopeguard"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"drop","","",81,[[["self"]]]],[11,"shutdown","","Drains the queue if there is one.",55,[[["self"],["duration"]],["bool"]]],[11,"clone","","",82,[[["self"]],["defaulttransportfactory"]]],[11,"create_transport","","",82,[[["self"],["clientoptions"]],["box",["transport"]]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new transport.",83,[[["clientoptions"]],["httptransport"]]],[11,"send_event","","",83,[[["self"],["event"]]]],[11,"shutdown","","",83,[[["self"],["duration"]],["bool"]]],[11,"drop","","",83,[[["self"]]]]],"paths":[[4,"Value"],[4,"Entry"],[3,"Values"],[3,"LogEntry"],[3,"Frame"],[3,"TemplateInfo"],[3,"Stacktrace"],[4,"ThreadId"],[3,"Addr"],[3,"RegVal"],[3,"Thread"],[3,"CError"],[3,"MachException"],[3,"PosixSignal"],[3,"MechanismMeta"],[3,"Mechanism"],[3,"Exception"],[4,"Level"],[3,"Breadcrumb"],[4,"IpAddress"],[3,"User"],[3,"Request"],[3,"SystemSdkInfo"],[4,"DebugImage"],[3,"AppleDebugImage"],[3,"SymbolicDebugImage"],[3,"ProguardDebugImage"],[3,"DebugMeta"],[3,"RepoReference"],[3,"ClientSdkInfo"],[3,"ClientSdkPackage"],[4,"Context"],[4,"Orientation"],[3,"DeviceContext"],[3,"OsContext"],[3,"RuntimeContext"],[3,"AppContext"],[3,"BrowserContext"],[3,"Event"],[8,"TimeZone"],[4,"UuidVariant"],[4,"UuidVersion"],[3,"ClientOptions"],[3,"Client"],[3,"Dsn"],[3,"Hub"],[3,"Scope"],[8,"FailureHubExt"],[3,"LoggerOptions"],[3,"Logger"],[4,"DsnParseError"],[4,"ProjectIdParseError"],[4,"Scheme"],[8,"IntoDsn"],[8,"IntoBreadcrumbs"],[8,"Transport"],[8,"TransportFactory"],[3,"BTreeMap"],[3,"Iter"],[3,"Range"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"OccupiedEntry"],[3,"RangeMut"],[3,"VacantEntry"],[3,"Map"],[3,"Number"],[3,"ProjectId"],[3,"Auth"],[3,"ParseLevelError"],[3,"ChronoParseError"],[3,"DateTime"],[3,"Utc"],[3,"ParseDebugIdError"],[3,"DebugId"],[3,"BreakpadFormat"],[3,"Uuid"],[3,"ClientInitGuard"],[3,"ScopeGuard"],[3,"DefaultTransportFactory"],[3,"HttpTransport"]]};
initSearch(searchIndex);
